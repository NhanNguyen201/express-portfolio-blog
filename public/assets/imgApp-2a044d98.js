import{S as e,d as n,e as t,A as i,W as a,j as s,M as o,P as r,V as c,h as v,T as m,D as h}from"./three.module-f98f4491.js";import{O as l}from"./OrbitControls-84413819.js";import{m as d}from"./me_img-ffe0a782.js";const u=""+new URL("../me_bg.jpg",import.meta.url).href,p=""+new URL("../table.jpg",import.meta.url).href,x=""+new URL("../background.jpg",import.meta.url).href,g={vertex:"\n        varying vec2 vUv;\n        varying float vWave;\n\n        uniform float uTime;\n        float PI = 3.141618;\n        float fre = 6.;\n\n        vec2 hash( vec2 p ) {\n            p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n            return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n        }\n\n        float noise( vec2 p ){\n            const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n            const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n            vec2  i = floor( p + (p.x+p.y)*K1 );\n            vec2  a = p - i + (i.x+i.y)*K2;\n            float m = step(a.y,a.x); \n            vec2  o = vec2(m,1.0-m);\n            vec2  b = a - o + K2;\n            vec2  c = a - 1.0 + 2.0*K2;\n            vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n            vec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n            return dot( n, vec3(70.0) ); // 70.\n        }\n\n        void main() {\n            vUv = uv;\n            float fre = 2.5;\n            vec2 noisePos = vec2((vUv.x + uTime * 0.15) * fre, (vUv.y + uTime * 0.25 ) * fre);   \n            vWave = noise(noisePos);\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n    ",fragment:"\n        uniform sampler2D uTexture1; \n        uniform sampler2D uTexture2; \n        uniform sampler2D uHeight; \n        uniform sampler2D uBackHeight; \n        uniform float uTime;\n\n        varying vec2 vUv;\n        varying float vWave;\n\n        vec4 toRgb (vec4 c) {\n            return vec4(c[0] / 255., c[1] / 255., c[2] / 255., c[3] );\n        }\n        vec4 colorRamp(float v, vec4 c4) {\n\n            vec4 c1 = toRgb(vec4(69., 0., 247., 1.));  // violet\n            vec4 c2 = toRgb(vec4(190., 37., 69., 1.)); // red\n               \n\n            vec4 color = mix(\n                mix(c1, c2, smoothstep(0.07, 0.13, v)),\n                c4,\n                step(0.2, v)\n            );\n            return color;\n        }\n        void main() {\n            vec2 cenUv = vUv ;\n            vec2 p = vUv;\n            float x = pow(sin(uTime * 2.), 2.);\n            x =  smoothstep(.0,1.0,(x*2.0+p.y-1.0));\n\n\n            float line = 0.;\n            float wave = vWave  * 0.45;\n            vec4 t1 = texture2D(uTexture1, vUv);\n            \n            vec4 t2 = texture2D(uTexture2, vUv );\n            vec4 tHeight = texture2D(uHeight, vUv);\n            vec4 tBack = texture2D(uBackHeight, vUv);\n\n            vec4 c1 = vec4(0., 0., 0., 1.);\n            vec4 c2 = vec4(1., 1., 1., 1.);\n\n          \n            vec4 mix1 = mix(\n                mix(\n                    texture2D(uTexture1, (p-.5)*(1.-x) + 0.5), \n                    texture2D(uTexture2, (p-.5)*x+ 0.5), \n\t\t\t\tx),\n                t1,\n                step(0.9, dot(tBack.rgb, vec3(1.)))\n            );\n\n            vec4 mix2 = mix(\n                mix(\n                    mix(mix1, c1, smoothstep(line - 0.02, line, vWave)), \n                    mix(c2, t2, smoothstep(line, line + 0.02, vWave)), \n                    step(line, vWave)\n                ),\n                mix1,\n                step(0.9, dot(tHeight.rgb, vec3(1.)))\n            );\n\n\n            gl_FragColor = mix2;\n        }\n    "};class f{constructor({container:s,dom:o}){this.dom=o,this.container=s,this.scene=new e,this.clock=new n,this.camera=new t(45,window.innerWidth/window.innerHeight,.01,1e5),this.camera.position.z=1.25,this.camera.position.y=0,this.camera.position.x=-.25,this.ambient=new i({color:7697781}),this.scene.add(this.ambient),this.img=null,this.renderer=new a({canvas:this.dom,antialias:!0}),this.renderer.setSize(this.container.clientWidth,this.container.clientHeight),this.controls=new l(this.camera,this.renderer.domElement),this.onResize()}init(){this.addLights(),this.initImage(),this.addEvents()}addLights(){var e=[];e[0]=new s(16777215,.55),e[0].position.set(3,0,0),e[1]=new s(1173691,1),e[1].position.set(4.75,8,.5),e[2]=new s(8519881,.5),e[2].position.set(-2.75,-1,.5),e[3]=new s(16777215,.5),e[3].position.set(5,3,-8),this.scene.add(e[0]),this.scene.add(e[1]),this.scene.add(e[2]),this.scene.add(e[3])}initImage(){this.img=new o(new r(new c(640,853).normalize().x,new c(640,853).normalize().y,100,100),new v({vertexShader:g.vertex,fragmentShader:g.fragment,uniforms:{uTexture1:{type:"sample2D",value:(new m).load(d)},uTexture2:{type:"sample2D",value:(new m).load(u)},uHeight:{type:"sample2D",value:(new m).load(p)},uBackHeight:{type:"sample2D",value:(new m).load(x)},uTime:{type:"float",value:0}},side:h})),this.scene.add(this.img)}addEvents(){window.requestAnimationFrame(this.run.bind(this)),window.addEventListener("resize",this.onResize.bind(this),!1)}run(){requestAnimationFrame(this.run.bind(this)),this.render()}render(){let e=this.clock.getElapsedTime();this.img.material.uniforms.uTime.value=e/4,this.img.rotation.y=Math.PI/16*Math.sin(e),this.renderer.render(this.scene,this.camera)}onResize(){const e=this.container.clientWidth,n=this.container.clientHeight;this.camera.aspect=e/n,this.camera.updateProjectionMatrix(),this.renderer.setSize(e,n)}}export{f as App};
